/*
题目：加一
给定一个表示 大整数 的整数数组 digits，其中 digits[i] 是整数的第 i 位数字。
这些数字按从左到右，从最高位到最低位排列。这个大整数不包含任何前导 0。
将大整数加 1，并返回结果的数字数组。

示例：
输入：digits = [1,2,3]
输出：[1,2,4]
解释：输入数组表示数字 123，加一后为 124
*/
package main

import (
	"fmt"
)

/*
算法思路：
从数组的最低位开始，逐位加一。如果当前位加一后小于 10，则直接返回结果。
如果当前位加一后等于 10，则当前位设为 0，继续加下一位。
如果最高位加一后等于 10，则需要在数组最前面插入一个 1。

时间复杂度：O(n)，其中 n 是数组的长度
空间复杂度：O(1)，除了返回的结果数组外，只使用了常数级别的额外空间
*/
func plusOne(digits []int) []int {
	// 从数组的最低位开始，逐位加一
	for i := len(digits) - 1; i >= 0; i-- {
		// 如果当前位加一后小于 10，则直接返回结果
		if digits[i] < 9 {
			digits[i]++
			return digits
		}
		// 如果当前位加一后等于 10，则当前位设为 0，继续加下一位
		digits[i] = 0
	}
	// 如果最高位加一后等于 10，则需要在数组最前面插入一个 1
	digits = append([]int{1}, digits...)
	return digits
}

func main() {
	// 测试用例1：普通情况
	fmt.Println("plusOne([1,2,3]):", plusOne([]int{1, 2, 3})) // 期望输出: [1,2,4]

	// 测试用例2：普通情况
	fmt.Println("plusOne([4,3,2,1]):", plusOne([]int{4, 3, 2, 1})) // 期望输出: [4,3,2,2]

	// 测试用例3：单个数字9
	fmt.Println("plusOne([9]):", plusOne([]int{9})) // 期望输出: [1,0]
}
